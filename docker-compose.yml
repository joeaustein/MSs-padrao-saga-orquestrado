services:

  order-db:
    image: mongo:latest
    container_name: order-db
    restart: always
    networks:
      - orchestrator-saga
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: 123456
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--username", "admin", "--password", "123456", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  product-db:
    image: postgres:latest
    container_name: product-db
    networks:
      - orchestrator-saga
    environment:
      POSTGRES_DB: product-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d product-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  payment-db:
    image: postgres:latest
    container_name: payment-db
    networks:
      - orchestrator-saga
    environment:
      POSTGRES_DB: payment-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d payment-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  inventory-db:
    image: postgres:latest
    container_name: inventory-db
    networks:
      - orchestrator-saga
    environment:
      POSTGRES_DB: inventory-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d inventory-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - orchestrator-saga
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  redpanda-console:
    container_name: redpanda
    image: redpandadata/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    networks:
      - orchestrator-saga
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - "kafka"

  order-service:
    build: './order-service'
    container_name: order-service
    depends_on:
      kafka:
        condition: service_started
      order-db:
        condition: service_healthy
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - MONGO_DB_URI=mongodb://admin:123456@order-db:27017
    ports:
      - 3000:3000

  orchestrator-service:
    build: './orchestrator-service'
    container_name: orchestrator-service
    depends_on:
      kafka:
        condition: service_started
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
    ports:
      - 8080:8080

  product-validation-service:
    build: './product-validation-service'
    container_name: product-validation-service
    depends_on:
      kafka:
        condition: service_started
      product-db:
        condition: service_healthy
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=product-db
      - DB_NAME=product-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8090:8090
  
  payment-service:
    build: './payment-service'
    container_name: payment-service
    depends_on:
      kafka:
        condition: service_started
      payment-db:
        condition: service_healthy
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=payment-db
      - DB_NAME=payment-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8091:8091

  inventory-service:
    build: './inventory-service'
    container_name: inventory-service
    depends_on:
      kafka:
        condition: service_started
      inventory-db:
        condition: service_healthy
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=inventory-db
      - DB_NAME=inventory-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - 8092:8092

networks:
  orchestrator-saga:
    driver: bridge
